- name: Collect cert indexes dynamically
  set_fact:
    cert_indexes: >-
      {{
        hostvars[inventory_hostname].keys()
        | select('match', '^cert[0-9]+_path$')
        | map('regex_replace', '^cert([0-9]+)_path$', '\1')
        | map('int')
        | list
        | sort
      }}

- name: Rebuild cert input records
  set_fact:
    cert_records: |
      {% set out = [] %}
      {% for i in cert_indexes %}
      {% set cert_path = vars['cert' ~ i ~ '_path'] %}
      {% set password = vars['cert' ~ i ~ '_pwd'] %}
      {% if cert_path | trim != '' and password | trim != '' %}
      {% set _ = out.append({
        'cert_path': cert_path,
        'password': password
      }) %}
      {% endif %}
      {% endfor %}
      {{ out }}

- name: Debug final cert records
  debug:
    var: cert_records


# - name: Generate PowerShell script and run encrypt.exe
#   hosts: windows
#   gather_facts: no
#   vars:
#     cert_records_b64: "{{ hostvars['localhost'].cert_records | to_json | b64encode }}"
#     exe_path: "C:\\Temp\\encrypt.exe"
#     ps1_path: "C:\\Temp\\RunEncryptInputs.ps1"

#   tasks:

- name: Decode the cert records JSON
  set_fact:
    cert_records: "{{ cert_records_b64 | b64decode | from_json }}"

- name: Generate PowerShell script content dynamically
  set_fact:
    ps_script: |
      # path to compiled exe
      $exePath = "{{ exe_path }}"

      # Start the exe in new window and get process object
      $p = Start-Process -FilePath $exePath -PassThru

      # Wait briefly for window to appear
      Start-Sleep -Seconds 2

      # Create the WScript.Shell COM object
      $wshell = New-Object -ComObject WScript.Shell

      # Activate the window of the process
      $wshell.AppActivate($p.Id)

      # Wait briefly
      Start-Sleep -Milliseconds 500

      {% for item in cert_records %}
      # Send cert {{ loop.index }}
      $wshell.SendKeys("{{ item.cert_path | replace('\\', '\\\\') }}{ENTER}")
      Start-Sleep -Milliseconds 200
      $wshell.SendKeys("{{ item.password }}{ENTER}")
      Start-Sleep -Milliseconds 200
      {% if not loop.last %}
      $wshell.SendKeys("y{ENTER}")
      {% else %}
      $wshell.SendKeys("n{ENTER}")
      {% endif %}
      Start-Sleep -Milliseconds 200
      {% endfor %}

      # Wait for the process to exit
      Start-Sleep -Seconds 2

- name: Debug generated PowerShell script
  debug:
    var: ps_script

- name: Write PowerShell script to Windows
  win_copy:
    content: "{{ ps_script }}"
    dest: "{{ ps1_path }}"

- name: Run PowerShell script to automate encrypt.exe
  win_shell: |
    powershell.exe -ExecutionPolicy Bypass -File "{{ ps1_path }}"
  register: encrypt_output

- name: Show encrypt.exe output
  debug:
    var: encrypt_output.stdout_lines
